// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/avito_shop/handler/handler.go
//
// Generated by this command:
//
//	mockgen -source=./internal/avito_shop/handler/handler.go -destination=test/mocks/mock_controller.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/dgt4l/avito_shop/internal/avito_shop/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockShopService is a mock of ShopService interface.
type MockShopService struct {
	ctrl     *gomock.Controller
	recorder *MockShopServiceMockRecorder
	isgomock struct{}
}

// MockShopServiceMockRecorder is the mock recorder for MockShopService.
type MockShopServiceMockRecorder struct {
	mock *MockShopService
}

// NewMockShopService creates a new mock instance.
func NewMockShopService(ctrl *gomock.Controller) *MockShopService {
	mock := &MockShopService{ctrl: ctrl}
	mock.recorder = &MockShopServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopService) EXPECT() *MockShopServiceMockRecorder {
	return m.recorder
}

// AuthUser mocks base method.
func (m *MockShopService) AuthUser(ctx context.Context, request *dto.AuthRequest) (*dto.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthUser", ctx, request)
	ret0, _ := ret[0].(*dto.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthUser indicates an expected call of AuthUser.
func (mr *MockShopServiceMockRecorder) AuthUser(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthUser", reflect.TypeOf((*MockShopService)(nil).AuthUser), ctx, request)
}

// BuyItem mocks base method.
func (m *MockShopService) BuyItem(ctx context.Context, request *dto.BuyItemRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockShopServiceMockRecorder) BuyItem(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockShopService)(nil).BuyItem), ctx, request)
}

// GetInfo mocks base method.
func (m *MockShopService) GetInfo(ctx context.Context, userId int) (*dto.InfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, userId)
	ret0, _ := ret[0].(*dto.InfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockShopServiceMockRecorder) GetInfo(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockShopService)(nil).GetInfo), ctx, userId)
}

// SendCoin mocks base method.
func (m *MockShopService) SendCoin(ctx context.Context, fromUserId int, request *dto.SendCoinRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoin", ctx, fromUserId, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCoin indicates an expected call of SendCoin.
func (mr *MockShopServiceMockRecorder) SendCoin(ctx, fromUserId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockShopService)(nil).SendCoin), ctx, fromUserId, request)
}
